/*
 * This file is generated by jOOQ.
*/
package docrep.db.tables;


import docrep.db.Indexes;
import docrep.db.Keys;
import docrep.db.Public;
import docrep.db.tables.records.StorageLocationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StorageLocation extends TableImpl<StorageLocationRecord> {

    private static final long serialVersionUID = 1285926499;

    /**
     * The reference instance of <code>public.storage_location</code>
     */
    public static final StorageLocation STORAGE_LOCATION = new StorageLocation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StorageLocationRecord> getRecordType() {
        return StorageLocationRecord.class;
    }

    /**
     * The column <code>public.storage_location.id</code>.
     */
    public final TableField<StorageLocationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('storage_location_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.storage_location.name</code>.
     */
    public final TableField<StorageLocationRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.storage_location.description</code>.
     */
    public final TableField<StorageLocationRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.storage_location.longitude</code>.
     */
    public final TableField<StorageLocationRecord, Double> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.storage_location.latitude</code>.
     */
    public final TableField<StorageLocationRecord, Double> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.storage_location.superior_storage_loc_id</code>.
     */
    public final TableField<StorageLocationRecord, Integer> SUPERIOR_STORAGE_LOC_ID = createField("superior_storage_loc_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.storage_location.type</code>.
     */
    public final TableField<StorageLocationRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.storage_location.account_id</code>.
     */
    public final TableField<StorageLocationRecord, Integer> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.storage_location</code> table reference
     */
    public StorageLocation() {
        this(DSL.name("storage_location"), null);
    }

    /**
     * Create an aliased <code>public.storage_location</code> table reference
     */
    public StorageLocation(String alias) {
        this(DSL.name(alias), STORAGE_LOCATION);
    }

    /**
     * Create an aliased <code>public.storage_location</code> table reference
     */
    public StorageLocation(Name alias) {
        this(alias, STORAGE_LOCATION);
    }

    private StorageLocation(Name alias, Table<StorageLocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private StorageLocation(Name alias, Table<StorageLocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STORAGE_LOCATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StorageLocationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STORAGE_LOCATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StorageLocationRecord> getPrimaryKey() {
        return Keys.STORAGE_LOCATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StorageLocationRecord>> getKeys() {
        return Arrays.<UniqueKey<StorageLocationRecord>>asList(Keys.STORAGE_LOCATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StorageLocationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StorageLocationRecord, ?>>asList(Keys.STORAGE_LOCATION__SUPERIOR_STORAGE_LOC_ID_FK, Keys.STORAGE_LOCATION__ACCOUNT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StorageLocation as(String alias) {
        return new StorageLocation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StorageLocation as(Name alias) {
        return new StorageLocation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageLocation rename(String name) {
        return new StorageLocation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageLocation rename(Name name) {
        return new StorageLocation(name, null);
    }
}
